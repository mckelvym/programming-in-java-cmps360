/* Author:          McKelvy, James Markus
 * CLID:            jmm0468
 * Class:           CMPS360
 * Assignment:      proj3
 * Date Assigned:   Thursday, 12 April 2007, 4:10 PM
 * Due date:        Friday, 4 May 2007, 10:00 PM
 * Description:
 * Gives the user the option of creating a new test, administering a test, or 
 * calling the DatabaseCreate and DatabaseLoad classes. 
 * The user will be prompted for input of username and password before continuing.
 */	

package proj3;

import java.sql.*;

/**
 * Gives the user the option of creating a new test, administering a test, or 
 * calling the DatabaseCreate and DatabaseLoad classes. 
 * The user will be prompted for input of username and password before continuing.
 * @author  mark
 */
public class Main extends javax.swing.JFrame {
    
    /** Creates new form Main */
    public Main() {
        register(); // register db driver
        initComponents();
        centerWindow();
    }
    
    /**
     *Centers the window on the screen.
     */
    private void centerWindow(){
        java.awt.Dimension screenSize = this.getToolkit().getScreenSize();
        java.awt.Dimension appSize = this.getSize();
        this.setLocation((screenSize.width - appSize.width) / 2,(screenSize.height - appSize.height) / 2);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        testingPanel = new javax.swing.JPanel();
        createNewTest = new javax.swing.JButton();
        administerTest = new javax.swing.JButton();
        createDB = new javax.swing.JButton();
        loadDB = new javax.swing.JButton();
        title = new javax.swing.JLabel();
        exit = new javax.swing.JButton();
        about = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Test Management System");
        setAlwaysOnTop(true);
        setBackground(new java.awt.Color(255, 255, 255));
        testingPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        testingPanel.setToolTipText("Test handling options");
        testingPanel.setName("Testing");
        createNewTest.setText("Add Questions to Test");
        createNewTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showCreate(evt);
            }
        });

        administerTest.setText("Administer Test");
        administerTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                administerTestActionPerformed(evt);
            }
        });

        createDB.setText("Create Database");
        createDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createDBActionPerformed(evt);
            }
        });

        loadDB.setText("Load Database");
        loadDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadDBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout testingPanelLayout = new javax.swing.GroupLayout(testingPanel);
        testingPanel.setLayout(testingPanelLayout);
        testingPanelLayout.setHorizontalGroup(
            testingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(testingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(testingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(createNewTest, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(administerTest, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE)
                    .addComponent(createDB, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE)
                    .addComponent(loadDB, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE))
                .addContainerGap())
        );
        testingPanelLayout.setVerticalGroup(
            testingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(testingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(createNewTest)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(administerTest)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(createDB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(loadDB)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        title.setFont(new java.awt.Font("Granada", 1, 12));
        title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title.setText("Testing Management System");
        title.setToolTipText("TMS software control center.");

        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        about.setText("About");
        about.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(about)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE)
                        .addComponent(exit, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(title, 0, 0, Short.MAX_VALUE)
                    .addComponent(testingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(title)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(testingPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(about)
                    .addComponent(exit))
                .addContainerGap())
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Call the DatabaseCreate.java class if the user knows the "secret" word.
     */
    private void loadDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadDBActionPerformed
        String ans = javax.swing.JOptionPane.showInputDialog(this, "What's the secret word?");
        if(ans.equals("please")){
            new DatabaseLoad();
            javax.swing.JOptionPane.showMessageDialog(this, "Successful");
        }
        else{
            javax.swing.JOptionPane.showMessageDialog(this, "Failure");
        }
    }//GEN-LAST:event_loadDBActionPerformed

    /**
     * Call the DatabaseLoad.java class if the user knows the "secret" word.
     */    
    private void createDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createDBActionPerformed
        String ans = javax.swing.JOptionPane.showInputDialog(this, "What's the secret word?");
        if(ans.equals("please")){
            new DatabaseCreate();
            javax.swing.JOptionPane.showMessageDialog(this, "Successful");
        }
        else{
            javax.swing.JOptionPane.showMessageDialog(this, "Failure");
        }
    }//GEN-LAST:event_createDBActionPerformed

    /**
     * Show the about frame.
     */
    private void aboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutActionPerformed
        this.setVisible(false);
        new About(this);
    }//GEN-LAST:event_aboutActionPerformed

    /**
     * Exit the app.
     */
    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        dispose();
    }//GEN-LAST:event_exitActionPerformed

    /**
     * Allow a student to login and take a test.
     */
    private void administerTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_administerTestActionPerformed
        this.setVisible(false);
        
        Connection c = getConnection(LoginInfo.url, LoginInfo.user, LoginInfo.pass);
        
        // return if can't get a connection
        if(c == null){
            System.out.println("Couldn't get connection,\ncheck to see that the server is running.");
            return;
        }
        String user = javax.swing.JOptionPane.showInputDialog(this, "What is your student id?");
        String pass = javax.swing.JOptionPane.showInputDialog(this, "What is your password?");
        
        // result object
        ResultSet r;
        int count = 0;
        try{
            // for executing sql statements
            Statement s = c.createStatement();
            
            r = s.executeQuery("select student.id from student where student.id = '" + user + "' and student.password = '" + pass + "';");
           while(r.next()){
                count++;
            }  
        }
        catch(SQLException e){
            System.out.println("Error getting data " + e);            
        }
        
        if(count != 0){
            new TestStudent(this, c);
        }
        else{
            // close the connection to database
            try {
                 c.close();
            } catch(SQLException e) {
                 e.printStackTrace();
            }  
            this.setVisible(true);       
            javax.swing.JOptionPane.showMessageDialog(this, "Sorry, access denied.");
        }
    }//GEN-LAST:event_administerTestActionPerformed

    /**
     * Allow a teacher to login and add questions to a test.
     */
    private void showCreate(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showCreate
        this.setVisible(false);
        Connection c = getConnection(LoginInfo.url, LoginInfo.user, LoginInfo.pass);
        
        // return if can't get a connection
        if(c == null){
            System.out.println("Couldn't get connection,\ncheck to see that the server is running.");
            return;
        }
        String user = javax.swing.JOptionPane.showInputDialog(this, "What is your teacher id?");
        String pass = javax.swing.JOptionPane.showInputDialog(this, "What is your password?");
        
        // result object
        ResultSet r;
        int count = 0;
        try{
            // for executing sql statements
            Statement s = c.createStatement();
            
            r = s.executeQuery("select teacher.id from teacher where teacher.id = '" + user + "' and teacher.password = '" + pass + "';");
           while(r.next()){
                count++;
            } 
        }
        catch(SQLException e){
            System.out.println("Error getting data " + e);            
        }
        
        if(count != 0){
            new Create(this, c);
        }      
        else{
            // close the connection to database
            try {
                 c.close();
            } catch(SQLException e) {
                 e.printStackTrace();
            }  
            this.setVisible(true);       
            javax.swing.JOptionPane.showMessageDialog(this, "Sorry, access denied.");
        }
    }//GEN-LAST:event_showCreate
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton about;
    private javax.swing.JButton administerTest;
    private javax.swing.JButton createDB;
    private javax.swing.JButton createNewTest;
    private javax.swing.JButton exit;
    private javax.swing.JButton loadDB;
    private javax.swing.JPanel testingPanel;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables
    
    /**
     *Register Mckoi JDBC driver
     */
    private boolean register(){
        try {
            Class.forName("com.mckoi.JDBCDriver").newInstance();
            return true;
        } catch (Exception e) {
            System.out.println("Cannot register driver: " + e);
            return false;
        }
    }
    
    /**
     *Attempts to get a connection to the database
     */
    private Connection getConnection(String url, String user, String pass){
        try {
            return DriverManager.getConnection(url, user, pass);
        } catch (SQLException e) {
            System.out.println("cannot create database: " + e);
            return null;
        }  
    }
    
    /**
     *Closes the connection to the database
     */
    private void closeConnection(Connection c){
        // close the connection to database
        try {
            c.close();
        } catch (SQLException e) {
            e.printStackTrace();
            return;
        }  
    }    
}
